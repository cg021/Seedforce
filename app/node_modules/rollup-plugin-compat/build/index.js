"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var path_1 = __importDefault(require("path"));
var rollup_pluginutils_1 = require("rollup-pluginutils");
var core_1 = require("@babel/core");
var es5_proxy_compat_1 = require("es5-proxy-compat");
var magic_string_1 = __importDefault(require("magic-string"));
var DEFAULT_BABEL_CONFIG = { babelrc: false, configFile: false };
var BABEL_COMPAT_PREFIX = '@babel/runtime';
var COMPAT_MODULE = 'babel-compat';
var PROXY_COMPAT_MODULE = 'proxy-compat';
var ES5_PRAGMA = '/* es5-compat-disable */';
var COMPAT_POLYFILL_SRC = es5_proxy_compat_1.envGetPolyfills();
var COMPAT_DOWNGRADE_SRC = es5_proxy_compat_1.envGetDowngrade();
var isProxyCompatModule = function (id) { return id.startsWith(PROXY_COMPAT_MODULE); };
var isBabelHelperModule = function (id) { return id.startsWith(BABEL_COMPAT_PREFIX); };
var isProxyCompatPath = function (id) { return id.includes(path_1.default.sep + PROXY_COMPAT_MODULE + path_1.default.sep); };
var isBabelHelperPath = function (id) { return id.includes(path_1.default.sep + COMPAT_MODULE + path_1.default.sep); };
var isPureImport = function (id) { return isBabelHelperPath(id) && es5_proxy_compat_1.babelIsPureHelper(path_1.default.basename(id, '.js')); };
var rename = function (s) { return s.replace(BABEL_COMPAT_PREFIX, COMPAT_MODULE); };
var normalizeHelperPath = function (id) { return id.includes(BABEL_COMPAT_PREFIX)
    ? rename(id)
    : path_1.default.resolve(COMPAT_MODULE, 'helpers', id); };
var ignoreEs5Compat = function (src) { return src.startsWith(ES5_PRAGMA); };
function compatPlugin(pluginOpts) {
    if (pluginOpts === void 0) { pluginOpts = {}; }
    var polyfills = pluginOpts.polyfills, downgrade = pluginOpts.downgrade, include = pluginOpts.include, exclude = pluginOpts.exclude;
    var onlyProxyTransform = pluginOpts.onlyProxyTransform, disableProxyTransform = pluginOpts.disableProxyTransform, sourcemap = pluginOpts.sourcemap;
    var includePolyfills = polyfills !== false;
    var filter = rollup_pluginutils_1.createFilter(include, exclude);
    var config = {
        sourceMaps: !!sourcemap
    };
    return {
        name: 'rollup-plugin-compat',
        resolveId: function (importee) {
            if (isProxyCompatModule(importee)) {
                return require.resolve(importee);
            }
            if (isBabelHelperModule(importee)) {
                return require.resolve(normalizeHelperPath(importee));
            }
        },
        transform: function (src, id) {
            var applyOnlyProxyTransform = onlyProxyTransform;
            // Custom COMPAT files dont need to be transformed at all
            if (!filter(id) || isProxyCompatPath(id) || isPureImport(id)) {
                return;
            }
            // Babel helpers or files with es5-pragma dont need the es5 transpilation
            if (isBabelHelperPath(id) || ignoreEs5Compat(src)) {
                applyOnlyProxyTransform = true;
            }
            var _a = core_1.transform(src, __assign({}, DEFAULT_BABEL_CONFIG, config, { presets: [[es5_proxy_compat_1.babelPreset, {
                            onlyProxyTransform: applyOnlyProxyTransform,
                            disableProxyTransform: disableProxyTransform,
                        }]] })), code = _a.code, map = _a.map;
            return { code: code, map: map };
        },
        // Add downgrade and polyfills at the end
        renderChunk: function (code) {
            var result = new magic_string_1.default(code);
            if (includePolyfills) {
                result.prepend(COMPAT_POLYFILL_SRC + '\n');
            }
            if (downgrade) {
                result.prepend(COMPAT_DOWNGRADE_SRC + '\n');
            }
            return {
                code: result.toString(),
                map: sourcemap ? result.generateMap({ hires: true }) : null
            };
        },
    };
}
exports.default = compatPlugin;
//# sourceMappingURL=module.js.map