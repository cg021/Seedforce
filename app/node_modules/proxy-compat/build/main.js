"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var array_1 = require("./array");
var object_1 = require("./object");
var methods_1 = require("./methods");
var xproxy_1 = require("./xproxy");
var intrinsics_1 = require("./intrinsics");
function getPrototypeOf(replicaOrAny) {
    if (methods_1.isCompatProxy(replicaOrAny)) {
        return replicaOrAny.getPrototypeOf();
    }
    return intrinsics_1.getPrototypeOf(replicaOrAny);
}
function setPrototypeOf(replicaOrAny, proto) {
    if (methods_1.isCompatProxy(replicaOrAny)) {
        return replicaOrAny.setPrototypeOf(proto);
    }
    return intrinsics_1.setPrototypeOf(replicaOrAny, proto);
}
function preventExtensions(replicaOrAny) {
    if (methods_1.isCompatProxy(replicaOrAny)) {
        return replicaOrAny.preventExtensions();
    }
    return intrinsics_1.preventExtensions(replicaOrAny);
}
function isExtensible(replicaOrAny) {
    if (methods_1.isCompatProxy(replicaOrAny)) {
        return replicaOrAny.isExtensible();
    }
    return intrinsics_1.isExtensible(replicaOrAny);
}
// Object patches
// TODO: Instead of monkey patching, move all of these to be compatInstrinsicMethods
// like the ones right below.
Object.preventExtensions = preventExtensions;
Object.getOwnPropertyNames = object_1.getOwnPropertyNames;
Object.isExtensible = isExtensible;
Object.setPrototypeOf = setPrototypeOf;
Object.getPrototypeOf = getPrototypeOf;
// We need to ensure that added compat methods are not-enumerable to avoid leaking
// when using for ... in without guarding via Object.hasOwnProperty.
Object.defineProperties(Object, {
    compatKeys: { value: object_1.keys, enumerable: false },
    compatValues: { value: object_1.values, enumerable: false },
    compatEntries: { value: object_1.entries, enumerable: false },
    compatDefineProperty: { value: object_1.defineProperty, enumerable: false },
    compatAssign: { value: object_1.assign, enumerable: false },
    compatGetOwnPropertyDescriptor: { value: object_1.getOwnPropertyDescriptor, enumerable: false }
});
Object.defineProperties(Object.prototype, {
    compatHasOwnProperty: { value: object_1.hasOwnProperty, enumerable: false }
});
// Array patches
Object.defineProperties(Array, {
    compatIsArray: { value: array_1.isArray, enumerable: false }
});
Object.defineProperties(Array.prototype, {
    compatUnshift: { value: array_1.unshift, enumerable: false },
    compatConcat: { value: array_1.concat, enumerable: false },
    compatPush: { value: array_1.push, enumerable: false },
});
function overrideProxy() {
    return Proxy.__COMPAT__;
}
function makeGlobal(obj) {
    var global = (function () { return this; })() || Function('return this')();
    global.Proxy = obj;
}
// At this point Proxy can be the real Proxy (function) a noop-proxy (object with noop-keys) or undefined
var FinalProxy = typeof Proxy !== 'undefined' ? Proxy : {};
if (typeof FinalProxy !== 'function' || overrideProxy()) {
    FinalProxy = /** @class */ (function (_super) {
        __extends(Proxy, _super);
        function Proxy() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return Proxy;
    }(xproxy_1.XProxy));
}
FinalProxy.isCompat = true;
FinalProxy.getKey = methods_1.getKey;
FinalProxy.getKeys = methods_1.getKeys;
FinalProxy.getKeys2 = methods_1.getKeys2;
FinalProxy.getKeys3 = methods_1.getKeys3;
FinalProxy.getKeys4 = methods_1.getKeys4;
FinalProxy.callKey = methods_1.callKey;
FinalProxy.callKey0 = methods_1.callKey0;
FinalProxy.callKey1 = methods_1.callKey1;
FinalProxy.callKey2 = methods_1.callKey2;
FinalProxy.callKey3 = methods_1.callKey3;
FinalProxy.callKey4 = methods_1.callKey4;
FinalProxy.setKey = methods_1.setKey;
FinalProxy.setKeyPostfixIncrement = methods_1.setKeyPostfixIncrement;
FinalProxy.setKeyPostfixDecrement = methods_1.setKeyPostfixDecrement;
FinalProxy.deleteKey = methods_1.deleteKey;
FinalProxy.inKey = methods_1.inKey;
FinalProxy.iterableKey = methods_1.iterableKey;
FinalProxy.instanceOfKey = methods_1.instanceOfKey;
FinalProxy.concat = methods_1.concat;
FinalProxy.hasOwnProperty = methods_1.hasOwnProperty;
if (typeof Proxy === 'undefined') {
    makeGlobal(FinalProxy);
}
exports.default = FinalProxy;
//# sourceMappingURL=module.js.map