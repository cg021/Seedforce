"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var xproxy_1 = require("./xproxy");
var intrinsics_1 = require("./intrinsics");
var array_1 = require("./array");
var object_1 = require("./object");
function defaultHasInstance(instance, Type) {
    // We have to grab getPrototypeOf here
    // because caching it at the module level is too early.
    // We need our shimmed version.
    var getPrototypeOf = Object.getPrototypeOf;
    var instanceProto = getPrototypeOf(instance);
    var TypeProto = exports.getKey(Type, 'prototype');
    while (instanceProto !== null) {
        if (instanceProto === TypeProto) {
            return true;
        }
        instanceProto = getPrototypeOf(instanceProto);
    }
    return false;
}
exports.defaultHasInstance = defaultHasInstance;
// NOTE: For performance reasons, the "_ES5ProxyType" key should be checked without
// using this function, unless `replicaOrAny._ES5ProxyType` might throw unexpectedly.
function isCompatProxy(replicaOrAny) {
    return replicaOrAny && replicaOrAny._ES5ProxyType;
}
exports.isCompatProxy = isCompatProxy;
exports.getKey = function (replicaOrAny, k1) {
    return replicaOrAny._ES5ProxyType ?
        replicaOrAny.get(k1) :
        replicaOrAny[k1];
};
exports.getKeys2 = function (replicaOrAny, k1, k2) {
    var replicaOrAny1 = replicaOrAny._ES5ProxyType ? replicaOrAny.get(k1) : replicaOrAny[k1];
    return replicaOrAny1._ES5ProxyType ? replicaOrAny1.get(k2) : replicaOrAny1[k2];
};
exports.getKeys3 = function (replicaOrAny, k1, k2, k3) {
    var replicaOrAny1 = replicaOrAny._ES5ProxyType ? replicaOrAny.get(k1) : replicaOrAny[k1];
    var replicaOrAny2 = replicaOrAny1._ES5ProxyType ? replicaOrAny1.get(k2) : replicaOrAny1[k2];
    return replicaOrAny2._ES5ProxyType ? replicaOrAny2.get(k3) : replicaOrAny2[k3];
};
exports.getKeys4 = function (replicaOrAny, k1, k2, k3, k4) {
    var replicaOrAny1 = replicaOrAny._ES5ProxyType ? replicaOrAny.get(k1) : replicaOrAny[k1];
    var replicaOrAny2 = replicaOrAny1._ES5ProxyType ? replicaOrAny1.get(k2) : replicaOrAny1[k2];
    var replicaOrAny3 = replicaOrAny2._ES5ProxyType ? replicaOrAny2.get(k3) : replicaOrAny2[k3];
    return replicaOrAny3._ES5ProxyType ? replicaOrAny3.get(k4) : replicaOrAny3[k4];
};
exports.getKeys = function (replicaOrAny) {
    var l = arguments.length;
    for (var i = 1; i < l; i++) {
        var key = arguments[i];
        replicaOrAny = replicaOrAny._ES5ProxyType ? replicaOrAny.get(key) : replicaOrAny[key];
    }
    return replicaOrAny;
};
exports.callKey0 = function (replicaOrAny, key) {
    return exports.getKey(replicaOrAny, key).call(replicaOrAny);
};
exports.callKey1 = function (replicaOrAny, key, a1) {
    return exports.getKey(replicaOrAny, key).call(replicaOrAny, a1);
};
exports.callKey2 = function (replicaOrAny, key, a1, a2) {
    return exports.getKey(replicaOrAny, key).call(replicaOrAny, a1, a2);
};
exports.callKey3 = function (replicaOrAny, key, a1, a2, a3) {
    return exports.getKey(replicaOrAny, key).call(replicaOrAny, a1, a2, a3);
};
exports.callKey4 = function (replicaOrAny, key, a1, a2, a3, a4) {
    return exports.getKey(replicaOrAny, key).call(replicaOrAny, a1, a2, a3, a4);
};
exports.callKey = function (replicaOrAny, key) {
    var fn = exports.getKey(replicaOrAny, key);
    var l = arguments.length;
    var args = [];
    for (var i = 2; i < l; i++) {
        args[i - 2] = arguments[i];
    }
    return fn.apply(replicaOrAny, args);
};
exports.setKey = function (replicaOrAny, key, newValue) {
    return replicaOrAny._ES5ProxyType ?
        replicaOrAny.set(key, newValue) :
        replicaOrAny[key] = newValue;
};
exports.setKeyPostfixIncrement = function (replicaOrAny, key) {
    var originalValue = exports.getKey(replicaOrAny, key);
    exports.setKey(replicaOrAny, key, originalValue + 1);
    return originalValue;
};
exports.setKeyPostfixDecrement = function (replicaOrAny, key) {
    var originalValue = exports.getKey(replicaOrAny, key);
    exports.setKey(replicaOrAny, key, originalValue - 1);
    return originalValue;
};
exports.deleteKey = function (replicaOrAny, key) {
    if (replicaOrAny._ES5ProxyType) {
        return replicaOrAny.deleteProperty(key);
    }
    delete replicaOrAny[key];
};
exports.inKey = function (replicaOrAny, key) {
    if (isCompatProxy(replicaOrAny)) {
        return replicaOrAny.has(key);
    }
    return xproxy_1.inOperator(replicaOrAny, key);
};
exports.iterableKey = function (replicaOrAny) {
    if (isCompatProxy(replicaOrAny)) {
        return replicaOrAny.forIn();
    }
    return replicaOrAny;
};
function instanceOfKey(instance, Type) {
    var instanceIsCompatProxy = isCompatProxy(instance);
    if (!isCompatProxy(Type) && !instanceIsCompatProxy) {
        return instance instanceof Type;
    }
    // TODO: Once polyfills are transpiled to compat
    // We can probably remove the below check
    if (instanceIsCompatProxy) {
        return defaultHasInstance(instance, Type);
    }
    return Type[Symbol.hasInstance](instance);
}
exports.instanceOfKey = instanceOfKey;
function concat(replicaOrAny) {
    var fn = exports.getKey(replicaOrAny, 'concat');
    if (fn === Array.prototype.concat) {
        fn = array_1.concat;
    }
    var args = [];
    var l = arguments.length;
    for (var i = 1; i < l; i++) {
        args[i - 1] = arguments[i];
    }
    return fn.apply(replicaOrAny, args);
}
exports.concat = concat;
function hasOwnProperty(replicaOrAny) {
    var fn = exports.getKey(replicaOrAny, 'hasOwnProperty');
    if (fn === intrinsics_1.hasOwnProperty) {
        fn = object_1.hasOwnProperty;
    }
    var args = [];
    var l = arguments.length;
    for (var i = 1; i < l; i++) {
        args[i - 1] = arguments[i];
    }
    return fn.apply(replicaOrAny, args);
}
exports.hasOwnProperty = hasOwnProperty;
//# sourceMappingURL=module.js.map