/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
/**
 * Generate a regenerator-runtime ES6 module
 * NOTE: @dval: Do a PR to support this natively
 * https://github.com/facebook/regenerator/tree/master/packages/regenerator-runtime
 */

const { readFileSync } = require('fs');
const regeneratorPath = require("regenerator-runtime/path").path;
const { transform } = require('@babel/core');

const GLOBAL_WRAPPER = 'global';
const DEFAULT_EXPORT = 'export default global.regeneratorRuntime;';

const inlineBabelRegeneratorRuntimePlugin = ({ types: t }) => {
    return {
        name: 'regenerator-global-wrapper',
        visitor: {
            Program(path) {
                const globalArgsPath = path.get('body.0.expression.argument.arguments.0');
                globalArgsPath.replaceWith(t.identifier(GLOBAL_WRAPPER));

                path.unshiftContainer('body', [
                    t.variableDeclaration('var', [
                        t.variableDeclarator(t.identifier(GLOBAL_WRAPPER), t.objectExpression([]))
                    ])
                ]);
            }
        }
    };
};

const regeneratorSource = readFileSync(regeneratorPath, 'utf-8');

function generateRegRuntimeSource() {
    const { code } = transform(regeneratorSource, {
        babelrc: false,
        comments: false,
        plugins: [inlineBabelRegeneratorRuntimePlugin]
    });

    return code + '\n' + DEFAULT_EXPORT;
}

module.exports = {
    generateRegRuntimeSource,
};
