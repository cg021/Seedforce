"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transform = void 0;
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const postcss_1 = __importDefault(require("postcss"));
const serialize_1 = __importDefault(require("./serialize"));
const postcss_lwc_plugin_1 = __importDefault(require("./postcss-lwc-plugin"));
function transform(src, id, config = {}) {
    if (src === '') {
        return { code: 'export default undefined' };
    }
    const allowDefinition = !config.customProperties || config.customProperties.allowDefinition;
    const collectVarFunctions = Boolean(config.customProperties && config.customProperties.resolverModule);
    const minify = config.outputConfig && config.outputConfig.minify;
    let plugins = [
        postcss_lwc_plugin_1.default({
            customProperties: {
                allowDefinition,
                collectVarFunctions,
            },
        }),
    ];
    if (minify) {
        const postcssMinify = require('./postcss-minify-plugins').default;
        // It's important to run the postcss minification plugins before the LWC one because we
        // need to clone the CSS declarations and they shouldn't be mangled by the minifier.
        plugins = [...postcssMinify(), ...plugins];
    }
    const result = postcss_1.default(plugins).process(src, { from: id });
    return { code: serialize_1.default(result, config) };
}
exports.transform = transform;
//# sourceMappingURL=transform.js.map