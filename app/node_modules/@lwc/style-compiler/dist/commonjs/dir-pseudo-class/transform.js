"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const postcss_selector_parser_1 = require("postcss-selector-parser");
const rtl_1 = require("../utils/rtl");
function isValidDirValue(value) {
    return value === 'ltr' || value === 'rtl';
}
function default_1(root) {
    root.nodes.forEach((node) => {
        const selector = node;
        selector.nodes.forEach((node) => {
            if (!rtl_1.isDirPseudoClass(node)) {
                return;
            }
            const value = node.nodes.toString().trim();
            if (!isValidDirValue(value)) {
                throw root.error(`:dir() pseudo class expects "ltr" or "rtl" for value, but received "${value}".`, {
                    index: node.sourceIndex,
                    word: node.value,
                });
            }
            // Remove the :dir pseudo class from the selector.
            node.remove();
            // If the selector is not empty and if the first node in the selector is not already a
            // " " combinator. We need to add in front of the selector a " " selector before adding
            // the converted dir attribute.
            const shouldInsertSpace = selector.first && !postcss_selector_parser_1.isCombinator(selector.first) && selector.first.value !== ' ';
            if (shouldInsertSpace) {
                selector.insertBefore(selector.first, postcss_selector_parser_1.combinator({
                    value: ' ',
                }));
            }
            // Add the dir attribute in front of the selector.
            selector.insertBefore(selector.first, postcss_selector_parser_1.attribute({
                attribute: 'dir',
                operator: '=',
                quoteMark: '"',
                value: `"${value}"`,
                raws: {},
            }));
        });
    });
}
exports.default = default_1;
//# sourceMappingURL=transform.js.map