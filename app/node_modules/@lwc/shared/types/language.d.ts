declare const assign: {
    <T, U>(target: T, source: U): T & U;
    <T_1, U_1, V>(target: T_1, source1: U_1, source2: V): T_1 & U_1 & V;
    <T_2, U_2, V_1, W>(target: T_2, source1: U_2, source2: V_1, source3: W): T_2 & U_2 & V_1 & W;
    (target: object, ...sources: any[]): any;
}, create: {
    (o: object | null): any;
    (o: object | null, properties: PropertyDescriptorMap & ThisType<any>): any;
}, defineProperties: (o: any, properties: PropertyDescriptorMap & ThisType<any>) => any, defineProperty: (o: any, p: string | number | symbol, attributes: PropertyDescriptor & ThisType<any>) => any, freeze: {
    <T>(a: T[]): readonly T[];
    <T_1 extends Function>(f: T_1): T_1;
    <T_2>(o: T_2): Readonly<T_2>;
}, getOwnPropertyDescriptor: (o: any, p: string | number | symbol) => PropertyDescriptor | undefined, getOwnPropertyNames: (o: any) => string[], getPrototypeOf: (o: any) => any, hasOwnProperty: (v: string | number | symbol) => boolean, isFrozen: (o: any) => boolean, keys: {
    (o: object): string[];
    (o: {}): string[];
}, seal: <T>(o: T) => T, setPrototypeOf: (o: any, proto: object | null) => any;
declare const isArray: (arg: any) => arg is any[];
declare const ArrayFilter: {
    <S extends any>(callbackfn: (value: any, index: number, array: any[]) => value is S, thisArg?: any): S[];
    (callbackfn: (value: any, index: number, array: any[]) => unknown, thisArg?: any): any[];
}, ArrayFind: {
    <S extends any>(predicate: (this: void, value: any, index: number, obj: any[]) => value is S, thisArg?: any): S | undefined;
    (predicate: (value: any, index: number, obj: any[]) => unknown, thisArg?: any): any;
}, ArrayIndexOf: (searchElement: any, fromIndex?: number | undefined) => number, ArrayJoin: (separator?: string | undefined) => string, ArrayMap: <U>(callbackfn: (value: any, index: number, array: any[]) => U, thisArg?: any) => U[], ArrayPush: (...items: any[]) => number, ArrayReduce: {
    (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any;
    (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any;
    <U>(callbackfn: (previousValue: U, currentValue: any, currentIndex: number, array: any[]) => U, initialValue: U): U;
}, ArrayReverse: () => any[], ArraySlice: (start?: number | undefined, end?: number | undefined) => any[], ArraySplice: {
    (start: number, deleteCount?: number | undefined): any[];
    (start: number, deleteCount: number, ...items: any[]): any[];
}, ArrayUnshift: (...items: any[]) => number, forEach: (callbackfn: (value: any, index: number, array: any[]) => void, thisArg?: any) => void;
declare const StringCharCodeAt: (index: number) => number, StringReplace: {
    (searchValue: string | RegExp, replaceValue: string): string;
    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
    (searchValue: {
        [Symbol.replace](string: string, replaceValue: string): string;
    }, replaceValue: string): string;
    (searchValue: {
        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
    }, replacer: (substring: string, ...args: any[]) => string): string;
}, StringSlice: (start?: number | undefined, end?: number | undefined) => string, StringToLowerCase: () => string;
export { ArrayFilter, ArrayFind, ArrayIndexOf, ArrayJoin, ArrayMap, ArrayPush, ArrayReduce, ArrayReverse, ArraySlice, ArraySplice, ArrayUnshift, assign, create, defineProperties, defineProperty, forEach, freeze, getOwnPropertyDescriptor, getOwnPropertyNames, getPrototypeOf, hasOwnProperty, isArray, isFrozen, keys, seal, setPrototypeOf, StringCharCodeAt, StringReplace, StringSlice, StringToLowerCase, };
export declare function isUndefined(obj: any): obj is undefined;
export declare function isNull(obj: any): obj is null;
export declare function isTrue(obj: any): obj is true;
export declare function isFalse(obj: any): obj is false;
export declare function isFunction(obj: any): obj is Function;
export declare function isObject(obj: any): obj is object;
export declare function isString(obj: any): obj is string;
export declare function isNumber(obj: any): obj is number;
export declare function toString(obj: any): string;
export declare function getPropertyDescriptor(o: any, p: PropertyKey): PropertyDescriptor | undefined;
export declare const emptyString = "";
