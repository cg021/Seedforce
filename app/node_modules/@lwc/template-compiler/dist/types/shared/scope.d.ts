import * as types from '@babel/types';
import { IRNode, TemplateExpression } from './types';
export interface BindingResult {
    expression: types.Expression;
    bounded: string[];
}
export interface MappedFunctionResult {
    expression: types.FunctionExpression;
    error?: string;
}
/**
 * Rewrite member expressions in function body that are referencing iterator.
 * - function (iteratorIndex) { iterator.index } -> function (iteratorIndex) { iteratorIndex }
 */
export declare function rewriteIteratorToArguments(expression: types.FunctionExpression, identifier: types.Identifier, argNames: {
    [key: string]: types.Identifier;
}): MappedFunctionResult;
/**
 * Bind the passed expression to the component instance. It applies the following transformation to the expression:
 * - {value} --> {$cmp.value}
 * - {value[state.index]} --> {$cmp.value[$cmp.index]}
 */
export declare function bindExpression(expression: TemplateExpression, node: IRNode, applyBinding?: boolean): BindingResult;
