"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeTextContent = exports.cleanTextNode = exports.getSource = exports.traverseHTML = exports.parseHTML = exports.treeAdapter = void 0;
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const parse5 = __importStar(require("parse5-with-errors"));
const he = __importStar(require("he"));
const errors_1 = require("@lwc/errors");
const constants_1 = require("./constants");
exports.treeAdapter = parse5.treeAdapters.default;
function parseHTML(source) {
    const parsingErrors = [];
    const onParseError = (err) => {
        const { code, startLine, startCol, startOffset, endOffset } = err;
        parsingErrors.push(errors_1.generateCompilerDiagnostic(errors_1.ParserDiagnostics.INVALID_HTML_SYNTAX, {
            messageArgs: [code],
            origin: {
                location: {
                    line: startLine,
                    column: startCol,
                    start: startOffset,
                    length: endOffset - startOffset,
                },
            },
        }));
    };
    const validateClosingTag = (node) => {
        if (!node.__location) {
            return;
        }
        const { startTag, endTag } = node.__location;
        const isVoidElement = constants_1.VOID_ELEMENT_SET.has(node.tagName);
        const missingClosingTag = !!startTag && !endTag;
        if (!isVoidElement && missingClosingTag) {
            parsingErrors.push(errors_1.generateCompilerDiagnostic(errors_1.ParserDiagnostics.NO_MATCHING_CLOSING_TAGS, {
                messageArgs: [node.tagName],
                origin: {
                    location: {
                        line: startTag.startLine || startTag.line,
                        column: startTag.startCol || startTag.col,
                        start: startTag.startOffset,
                        length: startTag.endOffset - startTag.startOffset,
                    },
                },
            }));
        }
    };
    const fragment = parse5.parseFragment(source, {
        locationInfo: true,
        onParseError,
    });
    if (!parsingErrors.length) {
        traverseHTML(fragment, {
            Element: {
                enter: validateClosingTag,
            },
        });
    }
    return {
        fragment,
        errors: parsingErrors,
    };
}
exports.parseHTML = parseHTML;
function traverseHTML(node, visitor) {
    let nodeVisitor;
    switch (node.nodeName) {
        case '#comment':
            nodeVisitor = visitor.Comment;
            break;
        case '#text':
            nodeVisitor = visitor.Text;
            break;
        default:
            nodeVisitor = visitor.Element;
    }
    if (nodeVisitor && nodeVisitor.enter) {
        nodeVisitor.enter(node);
    }
    // Node children are accessed differently depending on the node type:
    //  - standard elements have their children associated on the node itself
    //  - while the template node children are present on the content property.
    const children = exports.treeAdapter.getChildNodes(exports.treeAdapter.getTemplateContent(node) || node);
    // Traverse the node children if necessary.
    if (children !== undefined) {
        for (const child of children) {
            traverseHTML(child, visitor);
        }
    }
    if (nodeVisitor && nodeVisitor.exit) {
        nodeVisitor.exit(node);
    }
}
exports.traverseHTML = traverseHTML;
function getSource(source, location) {
    const { startOffset, endOffset } = location;
    return source.slice(startOffset, endOffset);
}
exports.getSource = getSource;
// https://github.com/babel/babel/blob/d33d02359474296402b1577ef53f20d94e9085c4/packages/babel-types/src/react.js#L9-L55
function cleanTextNode(value) {
    const lines = value.split(/\r\n|\n|\r/);
    let lastNonEmptyLine = 0;
    for (let i = 0; i < lines.length; i++) {
        if (lines[i].match(/[^ \t]/)) {
            lastNonEmptyLine = i;
        }
    }
    let str = '';
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const isFirstLine = i === 0;
        const isLastLine = i === lines.length - 1;
        const isLastNonEmptyLine = i === lastNonEmptyLine;
        let trimmedLine = line.replace(/\t/g, ' ');
        if (!isFirstLine) {
            trimmedLine = trimmedLine.replace(/^[ ]+/, '');
        }
        if (!isLastLine) {
            trimmedLine = trimmedLine.replace(/[ ]+$/, '');
        }
        if (trimmedLine) {
            if (!isLastNonEmptyLine) {
                trimmedLine += ' ';
            }
            str += trimmedLine;
        }
    }
    return str;
}
exports.cleanTextNode = cleanTextNode;
function decodeTextContent(source) {
    return he.decode(source);
}
exports.decodeTextContent = decodeTextContent;
//# sourceMappingURL=html.js.map