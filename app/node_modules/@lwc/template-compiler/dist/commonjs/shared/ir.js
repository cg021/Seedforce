"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isBoundToIterator = exports.isComponentProp = exports.traverse = exports.isCustomElement = exports.isElement = exports.createText = exports.createElement = void 0;
function createElement(tag, original) {
    return {
        type: 'element',
        __original: original,
        tag,
        attrsList: [],
        children: [],
    };
}
exports.createElement = createElement;
function createText(original, value) {
    return {
        type: 'text',
        __original: original,
        value,
    };
}
exports.createText = createText;
function isElement(node) {
    return node.type === 'element';
}
exports.isElement = isElement;
function isCustomElement(node) {
    return !!node.component;
}
exports.isCustomElement = isCustomElement;
function traverse(node, visitor) {
    const { enter, exit } = visitor[node.type] || {};
    if (enter) {
        enter(node);
    }
    if (isElement(node)) {
        for (const child of node.children) {
            traverse(child, visitor);
        }
    }
    if (exit) {
        exit(node);
    }
}
exports.traverse = traverse;
function isComponentProp(identifier, node) {
    if (!node) {
        return true;
    }
    // Make sure the identifier is not bound to any iteration variable
    if (isElement(node)) {
        const { forEach, forOf } = node;
        const boundToForItem = forEach && forEach.item.name === identifier.name;
        const boundToForIndex = forEach && forEach.index && forEach.index.name === identifier.name;
        const boundToForIterator = forOf && forOf.iterator.name === identifier.name;
        if (boundToForItem || boundToForIndex || boundToForIterator) {
            return false;
        }
    }
    // Delegate to parent component if no binding is found at this point
    return isComponentProp(identifier, node.parent);
}
exports.isComponentProp = isComponentProp;
function isBoundToIterator(identifier, node) {
    if (!node) {
        return false;
    }
    // Make sure the identifier is not bound to any iteration variable
    if (isElement(node)) {
        const { forOf } = node;
        if (forOf) {
            return Boolean(forOf.iterator.name === identifier.name);
        }
    }
    // Delegate to parent component if no binding is found at this point
    return isBoundToIterator(identifier, node.parent);
}
exports.isBoundToIterator = isBoundToIterator;
//# sourceMappingURL=ir.js.map