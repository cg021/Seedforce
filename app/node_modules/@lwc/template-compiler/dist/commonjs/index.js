"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileToFunction = exports.parse = void 0;
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const errors_1 = require("@lwc/errors");
const state_1 = __importDefault(require("./state"));
const config_1 = require("./config");
const parser_1 = __importDefault(require("./parser"));
const codegen_1 = __importDefault(require("./codegen"));
const constants_1 = require("./shared/constants");
function parse(source, config) {
    const options = config_1.mergeConfig(config || {});
    const state = new state_1.default(source, options);
    return parser_1.default(source, state);
}
exports.parse = parse;
function compile(source, config) {
    const options = config_1.mergeConfig(config);
    const state = new state_1.default(source, options);
    let code = '';
    const warnings = [];
    try {
        const parsingResults = parser_1.default(source, state);
        warnings.push(...parsingResults.warnings);
        const hasParsingError = parsingResults.warnings.some((warning) => warning.level === errors_1.DiagnosticLevel.Error);
        if (!hasParsingError && parsingResults.root) {
            const output = codegen_1.default(parsingResults.root, state);
            code = output.code;
        }
    }
    catch (error) {
        const diagnostic = errors_1.normalizeToDiagnostic(errors_1.ParserDiagnostics.GENERIC_PARSING_ERROR, error);
        diagnostic.message = `Unexpected compilation error: ${diagnostic.message}`;
        warnings.push(diagnostic);
    }
    return {
        code,
        warnings,
    };
}
exports.default = compile;
function compileToFunction(source) {
    const options = config_1.mergeConfig({});
    options.format = 'function';
    const state = new state_1.default(source, options);
    const parsingResults = parser_1.default(source, state);
    for (const warning of parsingResults.warnings) {
        if (warning.level === errors_1.DiagnosticLevel.Error) {
            throw errors_1.CompilerError.from(warning);
        }
        else if (warning.level === errors_1.DiagnosticLevel.Warning) {
            /* eslint-disable-next-line no-console */
            console.warn(warning.message);
        }
        else {
            /* eslint-disable-next-line no-console */
            console.log(warning.message);
        }
    }
    if (!parsingResults.root) {
        throw errors_1.generateCompilerError(errors_1.TemplateErrors.INVALID_TEMPLATE);
    }
    const { code } = codegen_1.default(parsingResults.root, state);
    return new Function(constants_1.TEMPLATE_MODULES_PARAMETER, code);
}
exports.compileToFunction = compileToFunction;
//# sourceMappingURL=index.js.map