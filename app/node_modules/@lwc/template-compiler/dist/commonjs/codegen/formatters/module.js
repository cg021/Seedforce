"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.format = void 0;
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const t = __importStar(require("@babel/types"));
const helpers_1 = require("../helpers");
const constants_1 = require("../../shared/constants");
function moduleNameToImport(name) {
    const localIdentifier = helpers_1.identifierFromComponentName(name);
    return t.importDeclaration([t.importDefaultSpecifier(localIdentifier)], t.stringLiteral(helpers_1.kebabcaseToCamelcase(name)));
}
function generateSecureImports(additionalImports) {
    const imports = additionalImports.map((additionalImport) => {
        return t.importSpecifier(t.identifier(additionalImport), t.identifier(additionalImport));
    });
    return t.importDeclaration([
        t.importSpecifier(t.identifier(constants_1.SECURE_REGISTER_TEMPLATE_METHOD_NAME), t.identifier(constants_1.SECURE_REGISTER_TEMPLATE_METHOD_NAME)),
        ...imports,
    ], t.stringLiteral(constants_1.LWC_MODULE_NAME));
}
function generateInlineStylesImports(state) {
    return state.inlineStyle.imports;
}
function format(templateFn, state) {
    const imports = state.dependencies.map((cmpClassName) => moduleNameToImport(cmpClassName));
    const metadata = helpers_1.generateTemplateMetadata(state);
    imports.push(generateSecureImports(state.secureDependencies));
    imports.push(...generateInlineStylesImports(state));
    const templateBody = [
        templateFn,
        t.exportDefaultDeclaration(t.callExpression(t.identifier(constants_1.SECURE_REGISTER_TEMPLATE_METHOD_NAME), [
            t.identifier(constants_1.TEMPLATE_FUNCTION_NAME),
        ])),
    ];
    return t.program([...imports, ...templateBody, ...metadata]);
}
exports.format = format;
//# sourceMappingURL=module.js.map