export declare type CustomPropertiesResolution = {
    type: 'native';
} | {
    type: 'module';
    name: string;
};
export interface CustomPropertiesConfig {
    allowDefinition?: boolean;
    resolution?: CustomPropertiesResolution;
}
export interface StylesheetConfig {
    customProperties?: CustomPropertiesConfig;
}
export interface OutputConfig {
    compat?: boolean;
    minify?: boolean;
    sourcemap?: boolean;
    env?: {
        NODE_ENV?: string;
    };
}
export interface BundleFiles {
    [filename: string]: string;
}
export declare type DynamicComponentConfig = Partial<NormalizedDynamicComponentConfig>;
export interface NormalizedDynamicComponentConfig {
    loader: string;
    strictSpecifier: boolean;
}
export interface TransformOptions {
    name?: string;
    namespace?: string;
    /**
     * An optional directory prefix that contains the specified components
     * files. Only used when the component that is the compiler's entry point.
     */
    baseDir?: string;
    stylesheetConfig?: StylesheetConfig;
    experimentalDynamicComponent?: DynamicComponentConfig;
    outputConfig?: OutputConfig;
    isExplicitImport?: boolean;
}
export interface CompileOptions extends TransformOptions {
    files: BundleFiles;
}
export interface NormalizedTransformOptions extends TransformOptions {
    outputConfig: NormalizedOutputConfig;
    stylesheetConfig: NormalizedStylesheetConfig;
    experimentalDynamicComponent: NormalizedDynamicComponentConfig;
    isExplicitImport: boolean;
}
export interface NormalizedCompileOptions extends CompileOptions {
    name: string;
    namespace: string;
    outputConfig: NormalizedOutputConfig;
    stylesheetConfig: NormalizedStylesheetConfig;
    experimentalDynamicComponent: NormalizedDynamicComponentConfig;
    isExplicitImport: boolean;
}
export interface NormalizedStylesheetConfig extends StylesheetConfig {
    customProperties: {
        allowDefinition: boolean;
        resolution: CustomPropertiesResolution;
    };
}
export interface NormalizedOutputConfig extends OutputConfig {
    compat: boolean;
    minify: boolean;
    sourcemap: boolean;
    env: {
        NODE_ENV?: string;
    };
}
export declare function validateNormalizedCompileOptions(options: NormalizedCompileOptions): void;
export declare function validateOptions(options: TransformOptions): void;
export declare function validateCompileOptions(options: CompileOptions): NormalizedCompileOptions;
export declare function validateTransformOptions(options: TransformOptions): NormalizedTransformOptions;
