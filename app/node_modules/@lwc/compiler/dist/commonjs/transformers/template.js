"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const path = __importStar(require("path"));
const errors_1 = require("@lwc/errors");
const template_compiler_1 = __importDefault(require("@lwc/template-compiler"));
/**
 * Transforms a HTML template into module exporting a template function.
 * The transform also add a style import for the default stylesheet associated with
 * the template regardless if there is an actual style or not.
 */
function templateTransform(src, filename, options) {
    let result;
    try {
        result = template_compiler_1.default(src, {
            experimentalDynamicDirective: !!options.experimentalDynamicComponent,
        });
    }
    catch (e) {
        throw errors_1.normalizeToCompilerError(errors_1.TransformerErrors.HTML_TRANSFORMER_ERROR, e, { filename });
    }
    const fatalError = result.warnings.find((warning) => warning.level === errors_1.DiagnosticLevel.Error);
    if (fatalError) {
        throw errors_1.CompilerError.from(fatalError, { filename });
    }
    // Rollup only cares about the mappings property on the map. Since producing a source map for
    // the template doesn't make sense, the transform returns an empty mappings.
    return {
        code: serialize(result.code, filename, options),
        map: { mappings: '' },
    };
}
exports.default = templateTransform;
function serialize(code, filename, { namespace, name }) {
    const cssRelPath = `./${path.basename(filename, path.extname(filename))}.css`;
    const scopingAttribute = `${namespace}-${name}_${path.basename(filename, path.extname(filename))}`;
    let buffer = '';
    buffer += `import _implicitStylesheets from "${cssRelPath}";\n\n`;
    buffer += code;
    buffer += '\n\n';
    buffer += 'if (_implicitStylesheets) {\n';
    buffer += `  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets)\n`;
    buffer += `}\n`;
    buffer += `tmpl.stylesheetTokens = {\n`;
    buffer += `  hostAttribute: "${scopingAttribute}-host",\n`;
    buffer += `  shadowAttribute: "${scopingAttribute}"\n`;
    buffer += `};\n`;
    return buffer;
}
//# sourceMappingURL=template.js.map