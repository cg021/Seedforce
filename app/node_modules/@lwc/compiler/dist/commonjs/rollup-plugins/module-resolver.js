"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const path_1 = __importDefault(require("path"));
const errors_1 = require("@lwc/errors");
const shared_1 = require("@lwc/shared");
const EMPTY_IMPLICIT_CSS_CONTENT = '';
const EMPTY_IMPLICIT_HTML_CONTENT = 'export default void 0';
const IMPLICIT_DEFAULT_HTML_PATH = '@lwc/resources/empty_html.js';
const IMPLICIT_DEFAULT_CSS_PATH = '@lwc/resources/empty_css.css';
const VALID_EXTENSIONS = ['.js', '.ts', '.html', '.css']; // order of resolution is important
function isRelativeImport(id) {
    return id.startsWith('.');
}
function isImplicitCssImport(source, importer) {
    return (path_1.default.extname(source) === '.css' &&
        importer &&
        path_1.default.extname(importer) === '.html' &&
        path_1.default.basename(source, '.css') === path_1.default.basename(importer, '.html'));
}
function isImplicitHTMLImport(source, importer) {
    return (importer &&
        path_1.default.extname(importer) === '.js' &&
        path_1.default.extname(source) === '.html' &&
        path_1.default.dirname(importer) === path_1.default.dirname(source) &&
        path_1.default.basename(importer, '.js') === path_1.default.basename(source, '.html'));
}
function isFirstCharacterUppercased(importee) {
    const upperCaseRegex = /^[A-Z]/;
    return importee && upperCaseRegex.test(importee);
}
function inferExtension(fileName, files) {
    if (!path_1.default.extname(fileName)) {
        const ext = VALID_EXTENSIONS.find((ext) => shared_1.hasOwnProperty.call(files, fileName + ext)) || '';
        return fileName + ext;
    }
    return fileName;
}
function fileExists(fileName, { files }) {
    return shared_1.hasOwnProperty.call(files, fileName);
}
function readFile(filename, options) {
    const { files } = options;
    if (fileExists(filename, options)) {
        return files[filename];
    }
    else {
        throw errors_1.generateCompilerError(errors_1.ModuleResolutionErrors.NONEXISTENT_FILE, {
            messageArgs: [filename],
            origin: { filename },
        });
    }
}
function generateModuleResolutionError(importee, importer, options) {
    const absPath = getAbsolutePath(importee, importer, options);
    const caseIgnoredFilename = getCaseIgnoredFilenameMatch(options.files, absPath);
    return caseIgnoredFilename
        ? errors_1.generateCompilerError(errors_1.ModuleResolutionErrors.IMPORT_AND_FILE_NAME_CASE_MISMATCH, {
            messageArgs: [
                importee,
                importer,
                caseIgnoredFilename.substr(0, caseIgnoredFilename.length - path_1.default.extname(caseIgnoredFilename).length),
            ],
            origin: { filename: importer },
        })
        : errors_1.generateCompilerError(errors_1.ModuleResolutionErrors.IMPORTEE_RESOLUTION_FROM_IMPORTER_FAILED, {
            messageArgs: [importee, importer, absPath],
            origin: { filename: importer },
        });
}
function generateEntryResolutionError(importee, importer, options) {
    const absPath = getAbsolutePath(importee, importer, options);
    const caseIgnoredFilename = getCaseIgnoredFilenameMatch(options.files, absPath);
    return caseIgnoredFilename
        ? errors_1.generateCompilerError(errors_1.ModuleResolutionErrors.FOLDER_AND_FILE_NAME_CASE_MISMATCH, {
            messageArgs: [caseIgnoredFilename, importee],
            origin: { filename: importer },
        })
        : errors_1.generateCompilerError(errors_1.ModuleResolutionErrors.IMPORTEE_RESOLUTION_FAILED, {
            messageArgs: [importee],
            origin: { filename: importer },
        });
}
function getAbsolutePath(importee, importer, options) {
    const { baseDir, files } = options;
    const relPath = importer ? path_1.default.dirname(importer) : baseDir || '';
    return inferExtension(path_1.default.join(relPath, importee), files);
}
function getCaseIgnoredFilenameMatch(files, nameToMatch) {
    return Object.keys(files).find((bundleFile) => bundleFile.toLowerCase() === nameToMatch);
}
function default_1({ options }) {
    return {
        name: 'lwc-module-resolver',
        resolveId(source, importer) {
            // Mark non-relative imports (eg. 'lwc' or 'x/foo') as external dependencies.
            if (!isRelativeImport(source) && importer) {
                return false;
            }
            if (isFirstCharacterUppercased(source)) {
                throw errors_1.generateCompilerError(errors_1.ModuleResolutionErrors.FOLDER_NAME_STARTS_WITH_CAPITAL_LETTER, {
                    messageArgs: [source, source.charAt(0).toLowerCase() + source.slice(1)],
                });
            }
            const absPath = getAbsolutePath(source, importer, options);
            if (!fileExists(absPath, options)) {
                if (isImplicitCssImport(source, importer)) {
                    return IMPLICIT_DEFAULT_CSS_PATH;
                }
                if (isImplicitHTMLImport(absPath, importer)) {
                    return IMPLICIT_DEFAULT_HTML_PATH;
                }
                throw importer
                    ? generateModuleResolutionError(source, importer, options)
                    : generateEntryResolutionError(source, importer, options);
            }
            return absPath;
        },
        load(id) {
            if (id === IMPLICIT_DEFAULT_CSS_PATH) {
                return EMPTY_IMPLICIT_CSS_CONTENT;
            }
            if (id === IMPLICIT_DEFAULT_HTML_PATH) {
                return EMPTY_IMPLICIT_HTML_CONTENT;
            }
            return path_1.default.extname(id) === '.css' && !fileExists(id, options)
                ? EMPTY_IMPLICIT_CSS_CONTENT
                : readFile(id, options);
        },
    };
}
exports.default = default_1;
//# sourceMappingURL=module-resolver.js.map