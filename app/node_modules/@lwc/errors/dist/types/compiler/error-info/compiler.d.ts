import { DiagnosticLevel } from '../../shared/types';
/**
 * TODO [W-5678919]: implement script to determine the next available error code
 * In the meantime, reference and the update the value at src/compiler/error-info/index.ts
 */
export declare const GENERIC_COMPILER_ERROR: {
    code: number;
    message: string;
    level: DiagnosticLevel;
};
export declare const CompilerValidationErrors: {
    INVALID_ALLOWDEFINITION_PROPERTY: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    INVALID_COMPAT_PROPERTY: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    INVALID_ENV_ENTRY_VALUE: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    INVALID_ENV_PROPERTY: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    INVALID_FILES_PROPERTY: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    INVALID_MINIFY_PROPERTY: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    INVALID_NAME_PROPERTY: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    INVALID_NAMESPACE_PROPERTY: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    INVALID_RESOLUTION_PROPERTY: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    INVALID_SOURCEMAP_PROPERTY: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    INVALID_TYPE_PROPERTY: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    MISSING_OPTIONS_OBJECT: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    UNEXPECTED_FILE_CONTENT: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    UNKNOWN_ENV_ENTRY_KEY: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
};
export declare const ModuleResolutionErrors: {
    MODULE_RESOLUTION_ERROR: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    IMPORTEE_RESOLUTION_FAILED: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    IMPORTEE_RESOLUTION_FROM_IMPORTER_FAILED: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    NONEXISTENT_FILE: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    FOLDER_NAME_STARTS_WITH_CAPITAL_LETTER: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    FOLDER_AND_FILE_NAME_CASE_MISMATCH: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    IMPORT_AND_FILE_NAME_CASE_MISMATCH: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    RELATIVE_DYNAMIC_IMPORT: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
};
export declare const TransformerErrors: {
    CSS_TRANSFORMER_ERROR: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    CSS_IN_HTML_ERROR: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    HTML_TRANSFORMER_ERROR: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    INVALID_ID: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    INVALID_SOURCE: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    JS_TRANSFORMER_ERROR: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
    NO_AVAILABLE_TRANSFORMER: {
        code: number;
        message: string;
        level: DiagnosticLevel;
        url: string;
    };
};
