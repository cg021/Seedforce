import { register as register$1 } from '@lwc/engine';
import { register, ValueChangedEvent, registerWireService } from '@lwc/wire-service';

/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

const wireAdaptersRegistryHack = global.wireAdaptersRegistryHack || new Map();

function createLegacyAdapter(adapterId, spy) {
    register(adapterId, (wiredEventTarget) => {
        const instance = {
            emit(value) {
                wiredEventTarget.dispatchEvent(new ValueChangedEvent(value));
            }
        };
        spy.createInstance(instance);

        wiredEventTarget.addEventListener('connect', () => {
            spy.connect(instance);
        });

        wiredEventTarget.addEventListener('disconnect', () => {
            spy.disconnect(instance);
        });

        wiredEventTarget.addEventListener('config', (newConfig) => {
            spy.update(instance, newConfig);
        });
    });
}

function spyOnAdapter(spy, adapterId) {
    const relatedAdapter = wireAdaptersRegistryHack.get(adapterId);

    if (!relatedAdapter) {
        createLegacyAdapter(adapterId, spy);
    } else {
        relatedAdapter.adapter.spyAdapter(spy);
    }
}

/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

function createAdapter(adapterId) {
    let done = false;
    let lastConfig;
    const wiredEventTargets = new Set();
    const spy = {
        createInstance(wiredEventTarget) {
            done = false;
            wiredEventTargets.add(wiredEventTarget);
            wiredEventTarget.emit({ data: undefined, error: undefined });
        },
        connect(wiredEventTarget) {
            done = false;
            lastConfig = {};
            wiredEventTargets.add(wiredEventTarget);
        },
        update(wiredEventTarget, config) {
            lastConfig = config;
        },
        disconnect(wiredEventTarget) {
            done = true;
            lastConfig = undefined;
            wiredEventTargets.delete(wiredEventTarget);
        }
    };

    spyOnAdapter(spy, adapterId);

    return {
        emit(value) {
            if (!done) {
                wiredEventTargets.forEach(
                    wiredEventTarget => wiredEventTarget.emit({ data: value, error: undefined })
                );
            }
        },
        error(body, status, statusText) {
            if (!done) {
                done = true;

                if (status && (status < 400 || status > 599)) {
                    throw new Error("'status' must be >= 400 or <= 599");
                }

                body = body || [{
                    errorCode: 'NOT_FOUND',
                    message: 'The requested resource does not exist',
                }];

                status = status || 404;

                statusText = statusText || 'NOT_FOUND';

                const err = {
                    body,
                    ok: false,
                    status,
                    statusText,
                };

                wiredEventTargets.forEach(
                    wiredEventTarget => wiredEventTarget.emit({ data: undefined, error: err })
                );
            }
        },
        getLastConfig() {
            return lastConfig;
        }
    };
}

/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

function createAdapter$1(adapterId) {
    let lastConfig;
    const wiredEventTargets = new Set();
    const spy = {
        createInstance(wiredEventTarget) {
            wiredEventTargets.add(wiredEventTarget);
        },
        connect(wiredEventTarget) {
            lastConfig = {};
            wiredEventTargets.add(wiredEventTarget);
        },
        update(wiredEventTarget, config) {
            lastConfig = config;
        },
        disconnect(wiredEventTarget) {
            lastConfig = undefined;
            wiredEventTargets.delete(wiredEventTarget);
        }
    };

    spyOnAdapter(spy, adapterId);

    return {
        emit(value) {
            wiredEventTargets.forEach(wiredEventTarget => wiredEventTarget.emit(value));
        },
        getLastConfig() {
            return lastConfig;
        }
    };
}

/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

function createAdapter$2(adapterId) {
    let done = false;
    let lastConfig;
    const wiredEventTargets = new Set();
    const spy = {
        createInstance(wiredEventTarget) {
            done = false;
            wiredEventTargets.add(wiredEventTarget);
            wiredEventTarget.emit({ data: undefined, error: undefined });
        },
        connect(wiredEventTarget) {
            done = false;
            lastConfig = {};
            wiredEventTargets.add(wiredEventTarget);
        },
        update(wiredEventTarget, config) {
            lastConfig = config;
        },
        disconnect(wiredEventTarget) {
            done = true;
            lastConfig = undefined;
            wiredEventTargets.delete(wiredEventTarget);
        }
    };

    spyOnAdapter(spy, adapterId);

    return {
        emit(value) {
            if (!done) {
                wiredEventTargets.forEach(
                    wiredEventTarget => wiredEventTarget.emit({ data: value, error: undefined })
                );
            }
        },
        error(body, status, statusText) {
            if (!done) {
                done = true;

                if (status && (status < 400 || status > 599)) {
                    throw new Error("'status' must be >= 400 or <= 599");
                }

                body = body || {
                    message: 'An internal server error has occurred',
                };

                status = status || 400;

                statusText = statusText || 'Bad Request';

                const err = {
                    body,
                    ok: false,
                    status,
                    statusText,
                };

                wiredEventTargets.forEach(
                    wiredEventTarget => wiredEventTarget.emit({ data: undefined, error: err })
                );
            }
        },
        getLastConfig() {
            return lastConfig;
        }
    };
}

/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

let registered = false;

// Not needed since lwc >= 1.5.0
function ensureWireServiceRegistered() {
    if (!registered) {
        registerWireService(register$1);
        registered = true;
    }
}


function validateAdapterId(adapterId) {
    if (!adapterId) {
        throw new Error('No adapter specified');
    }
}

function registerLdsTestWireAdapter(identifier) {
    validateAdapterId(identifier);

    ensureWireServiceRegistered();

    return createAdapter(identifier);
}

function registerApexTestWireAdapter(identifier) {
    validateAdapterId(identifier);

    ensureWireServiceRegistered();

    return createAdapter$2(identifier);
}

function registerTestWireAdapter(identifier) {
    validateAdapterId(identifier);

    ensureWireServiceRegistered();

    return createAdapter$1(identifier);
}

export { registerApexTestWireAdapter, registerLdsTestWireAdapter, registerTestWireAdapter };
