"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const loaderUtils = require('loader-utils');
const compiler = require('@lwc/compiler');
const babel = require('@babel/core');
const lwcConfig_1 = require("../../config/lwcConfig");
const stylesheetConfig = lwcConfig_1.lwcConfig.lwcCompilerStylesheetConfig;
const experimentalDynamicComponent = lwcConfig_1.lwcConfig.lwcExperimentalDynamicComponent;
const { getConfig, getInfoFromPath } = require('./module');
module.exports = function (source) {
    // @ts-ignore
    const { resourcePath } = this;
    const config = getConfig(loaderUtils.getOptions(this));
    let info;
    try {
        info = getInfoFromPath(resourcePath, config);
    }
    catch (e) {
        info = {
            name: '',
            namespace: ''
        };
    }
    let compilerOutput = {};
    if (config.mode === 'development' &&
        lwcConfig_1.lwcConfig.lwcCompilerOutput &&
        lwcConfig_1.lwcConfig.lwcCompilerOutput) {
        compilerOutput = lwcConfig_1.lwcConfig.lwcCompilerOutput.development;
    }
    else if (config.mode === 'production' &&
        lwcConfig_1.lwcConfig.lwcCompilerOutput &&
        lwcConfig_1.lwcConfig.lwcCompilerOutput.production) {
        compilerOutput = lwcConfig_1.lwcConfig.lwcCompilerOutput.production;
    }
    let codeTransformed = source;
    if (resourcePath.endsWith('.ts')) {
        const { code } = babel.transform(source, {
            filename: resourcePath,
            plugins: [
                require.resolve('@babel/plugin-syntax-class-properties'),
                [
                    require.resolve('@babel/plugin-syntax-decorators'),
                    {
                        decoratorsBeforeExport: true
                    }
                ]
            ],
            presets: [require.resolve('@babel/preset-typescript')]
        });
        codeTransformed = code;
    }
    // @ts-ignore
    const cb = this.async();
    compiler
        .transform(codeTransformed, resourcePath, {
        name: info.name,
        namespace: info.ns,
        outputConfig: compilerOutput,
        stylesheetConfig,
        experimentalDynamicComponent
    })
        .then((res) => {
        cb(null, res.code);
    })
        .catch((err) => {
        cb(err);
    });
    return;
};
