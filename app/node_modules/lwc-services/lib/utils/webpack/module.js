"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
function getConfig(opts) {
    if (opts.module === null || typeof opts.module.path !== 'string') {
        throw new TypeError(`module.path expects a string value. Received ${opts.module.path}`);
    }
    const moduleConfig = Object.assign({}, opts.module);
    return Object.assign(Object.assign({}, opts), { module: moduleConfig });
}
function isValidModuleName(id) {
    return id.match(/^(\w+\/)(\w+)$/);
}
function getInfoFromId(id) {
    const [ns, ...rest] = id.split('/');
    return {
        ns,
        name: rest.join('/')
    };
}
function getInfoFromPath(file, config) {
    const { path: root } = config.module;
    if (!file.startsWith(root)) {
        let jsFile = file;
        if (!file.endsWith('.js')) {
            const split = file.split('.');
            jsFile = split.slice(0, -1).join('.') + '.js';
        }
        const parent = path.dirname(file).split('/').pop();
        const basename = path.basename(file).split('.').slice(0, -1).join('.');
        if (parent !== basename) {
            jsFile = path.resolve(path.dirname(file), `${parent}.js`);
        }
        throw new Error(`Invalid file path. ${file} is not part of ${root}`);
    }
    const rel = path.relative(root, file);
    const parts = rel.split(path.sep);
    const id = `${parts[0]}-${parts[1]}`;
    return getInfoFromId(id);
}
module.exports = {
    getConfig,
    isValidModuleName,
    getInfoFromId,
    getInfoFromPath
};
