"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const { getConfig, isValidModuleName } = require('./module');
const lwcResolver = require('@lwc/module-resolver');
const EMPTY_STYLE = path.resolve(__dirname, 'mocks', 'empty-style.js');
/**
 * Webpack plugin to resolve LWC modules.
 */
module.exports = class ModuleResolver {
    constructor(config) {
        this.config = getConfig(config);
    }
    apply(resolver) {
        this.fs = resolver.fileSystem;
        resolver.hooks.module.tapAsync('LWC module', (req, ctx, cb) => this.resolveModule(req, ctx, cb));
        resolver.hooks.file.tapAsync('LWC CSS', (req, ctx, cb) => this.resolveFile(req, ctx, cb));
    }
    resolveModule(req, ctx, cb) {
        const { request, query, context: { issuer } } = req;
        if (!issuer || !isValidModuleName(request)) {
            return cb();
        }
        try {
            const mod = lwcResolver.resolveModule(request, issuer);
            return cb(undefined, {
                path: mod.entry,
                query,
                file: true,
                resolved: true
            });
        }
        catch (e) {
            // LWC Module Resolver will throw errors for any non lwc modules
            cb();
        }
    }
    isImplicitHTMLImport(importee, importer) {
        return (path.extname(importer) === '.js' &&
            path.extname(importee) === '.html' &&
            path.dirname(importer) === path.dirname(importee) &&
            path.basename(importer, '.js') === path.basename(importee, '.html'));
    }
    resolveFile(req, ctx, cb) {
        const { path: resourcePath, query } = req;
        const extname = path.extname(resourcePath);
        if (extname !== '.css' && extname !== '.html') {
            return cb();
        }
        this.fs.stat(resourcePath, (err) => {
            if (err !== null && err.code === 'ENOENT') {
                if (extname === '.css' ||
                    this.isImplicitHTMLImport(resourcePath, req.context.issuer)) {
                    return cb(null, {
                        path: EMPTY_STYLE,
                        query,
                        file: true,
                        resolved: false
                    });
                }
            }
            return cb();
        });
    }
};
