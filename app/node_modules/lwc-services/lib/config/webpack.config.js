"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateWebpackConfig = void 0;
const { buildWebpackConfig } = require('../utils/webpack/webpack-builder');
const CopyPlugin = require('copy-webpack-plugin');
const ErrorOverlayPlugin = require('error-overlay-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const path = require("path");
const fs = require('fs');
const lwcConfig_1 = require("./lwcConfig");
const ROOT_DIR = process.cwd();
const OUTPUT_DIR = path.resolve(ROOT_DIR, lwcConfig_1.lwcConfig.buildDir);
const MODULE_DIR = path.resolve(ROOT_DIR, lwcConfig_1.lwcConfig.sourceDir, 'modules');
const TEMPLATES_DIR = path.resolve(ROOT_DIR, lwcConfig_1.lwcConfig.sourceDir);
let ENTRIES = path.resolve(TEMPLATES_DIR, 'index.js');
if (!ENTRIES || !fs.existsSync(ENTRIES)) {
    ENTRIES = path.resolve(TEMPLATES_DIR, 'index.ts');
}
// Simple mechanism to pass any arbitrary config values from the CLI for webpack
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function generateWebpackConfig(mode, customConfig) {
    const lwcWebpackConfig = buildWebpackConfig({
        entries: [ENTRIES],
        outputDir: OUTPUT_DIR,
        moduleDir: MODULE_DIR,
        mode,
        customConfig
    });
    lwcWebpackConfig.plugins = (lwcWebpackConfig.plugins || []).concat([
        new HtmlWebpackPlugin({
            template: path.resolve(TEMPLATES_DIR, 'index.html')
        })
    ]);
    if (lwcConfig_1.lwcConfig.resources.length) {
        const resources = [];
        lwcConfig_1.lwcConfig.resources.forEach((resource) => {
            resources.push({
                from: path.resolve(process.cwd(), resource.from),
                to: path.join(process.cwd(), resource.to)
            });
        });
        lwcWebpackConfig.plugins = (lwcWebpackConfig.plugins || []).concat([
            new CopyPlugin({ patterns: resources })
        ]);
    }
    // error-overlay-webpack-plugin has a bug that breaks the build when > 1 entry point is specified
    if (Object.keys(lwcWebpackConfig.entry).length == 1) {
        lwcWebpackConfig.plugins = (lwcWebpackConfig.plugins || []).concat([
            // TODO Test potential alternatives for multiple entries
            new ErrorOverlayPlugin()
        ]);
    }
    return lwcWebpackConfig;
}
exports.generateWebpackConfig = generateWebpackConfig;
